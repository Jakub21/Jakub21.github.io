@doctype
$html {
  $head {
    $title {Projects Index}
    %meta[charset 'utf-8']
    %link[rel stylesheet
      href 'https://fonts.googleapis.com/css?family=Montserrat']
    %link[rel stylesheet
      href 'https://fonts.googleapis.com/css?family=Open+Sans']
    %link[rel stylesheet href 'index.css']
    $script[src 'js/Domi.js']
    $script[src 'js/shp.js']
    $script[src 'js/Data.js']
    $script[src 'js/Main.js']
  }
  $body[onload 'main()'] {
    $section[#Landing] {
      $div[.Background]
      $div[.Content] {
        $h1 {Projects Index}
        $p {List of projects I have made over the years.}
        $button[onclick 'goto("main", "about")'] {About me}
        $button[onclick 'goto("main", "projects")'] {See my projects}
        $div[#Contact] {
          $div[.Container] {
            $p {Contact me}
            $div[.Column] {
              $p[.Type] {E-mail address}
              $p[.Value] {
                $a[href 'mailto:jakubp2101@gmail.com' target _blank] {
                  jakubp2101@gmail.com
                }
              }
            }
            $div[.Column] {
              $p[.Type] {Github profile}
              $p[.Value] {
                $a[href 'https://github.com/Jakub21' target _blank] {
                  github.com/Jakub21
                }
              }
            }
            $div[.Clear]
          }
        }
      }
    }
    $section[#About] {
      $div[.Background]
      $div[.Content] {
        $button[.Back .SquareButton onclick 'goto("main", "landing");']
        $div[.Header] {
          $h2 {About}
          $div[.Links] {
            $a[.Email href 'mailto:jakubp2101@gmail.com' target _blank] {
              $img[src 'img/buttons/email.png']
              $span {jakubp2101@gmail.com}
            }
            $a[.Github href 'https://github.com/Jakub21' target _blank] {
              $img[src 'img/buttons/github.png']
              $span {github.com/Jakub21}
            }
          }
        }
        $div[.TextSection] {
          $h4 {Languages & technologies}
          $div[.Entry .Major] {
            $div[.Category] {Python 3}
            $div[.Entry] {socket}
            $div[.Entry] {tkinter}
            $div[.Entry] {opencv}
          }

          $div[.Entry .Major] {
            $div[.Category] {Javascript (ES6)}
            $div[.Entry] {Node.js}
            $div[.Entry] {socket.io}
          }
          $div[.Entry .Major] {
            $div[.Category] {HTML 5 + CSS 3}
            $div[.Entry] {SASS}
          }
        }
        $div[.TextSection] {
          $h4 {Other Skills}
          $div[.Entry] {English}
          $div[.Entry] {Polish}
          $div[.Entry] {Problem solving}
          $div[.Entry] {OOP}
        }
        $div[.TextSection] {
          $h4 {My coding history}
          I started programming as a hobby in my teen years.
          The first language I learned was C++.
          It helped me learn the basiscs and sparked interest in the topic. $br
          
          In 2017 I tried out Python and soon it became my main programming language.
          I created many minor projects
          that made me gain useful knowledge in some branches of programming. $br
          
          In 2019 I started learning Javascript.
          It allowed me develop apps with complex, moderately good looking user interfaces.
          Because of HTML canvas I got interested in 2D simulators and mini games. $br
          
          Over time my focus shifted to web applications.
          Most of my work in 2020 is focused learning about Node.js and front-end technologies. $br
          
          Because of my model of learning and the way I work on personal projects,
          most of my repositories are utility packages.
          My best non-utility projects include WebChat and RoverSoft.
          To learn more about them see the My Projects section.
        }
        $div[.TextSection] {
          $h4 {Meta}
          $p {Made in 2020 Q4}
          $p[.Links] { $a[.Github href 'https://github.com/Jakub21/jakub21.github.io' target _blank] {
            $img[src 'img/buttons/github.png']
            $span {Project repository}
          }}
          $p {External resources}
          $div {
            $a[.Entry href 'https://unsplash.com/photos/ieic5Tq8YMk?utm_source=unsplash&utm_medium=referral&utm_content=creditShareLink' target _blank] {Landing page background}
            $a[.Entry href 'https://github.com/voodootikigod/logo.js' target _blank] {Javascript logo}
            $a[.Entry href 'https://www.python.org/community/logos/' target _blank] {Python logo}
          }
        }
      }
    }
    $section[#Projects] {
      $div[#Index .Project] {
      $div[.Background]
        $div[.Content] {
          $button[.Back .SquareButton onclick 'goto("main", "landing");']
          $h2 {My projects}
          $div[.TextSection .Introduction] {
            This is a list of my personal projects that I find worth sharing
            or showcase some skillset in practice.
            See my Github profile for more.
          }
          $div[#IndexListing]
          $div[.TextSection .Introduction] {
            These projects are older but played significant role in my learning process.
            They were either abandoned, suspended or no longer represent my skill level.
          }
          $div[#IndexListingOld]
        }
      }
      $div[#Chat .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
          $div[.TextSection] {
            $h4 {Tech stack}
            $div[.Entry] {Node.js}
            $div[.Entry] {MongoDB}
            $div[.Entry] {express}
            $div[.Entry] {socket.io}
          }
          $div[.TextSection] {
            $h4 {What it does}
            This is a chat application for browsers, both desktop and mobile.
            Users can create and join rooms to chat in.
            Room can be opened to the public or protected with a passcode.
          }
          $div[.TextSection] {
            $h4 {How it works}
            Node.js runs express app that serves files.
            Real-time communication is handled by a socket.io server.
            Users data, rooms settings and chat history is stored on a MongoDB database.
            User session persistence was achieved with cookies.
          }
          $div[.TextSection] {
            $h4 {Deployment}
            There is no project clone running that is available to the public because of
            lack of free Node.js hosting services.
            To try out the app please clone the repository and follow instructions in Readme.
          }
          $div[.TextSection] {
            $h4 {Recent progress}
            Project was recently refactored.
            New version uses SASS preprocessor, MongoDB with mongoose.js and has better appearance.
            Old version utilized text file based database.
          }
          $div[.TextSection] {
            $h4 {Limitations}
            Neither socket.io communication or database is encrypted.
          }
          $div[.TextSection .Screenshots]
        }
      }
      $div[#Walkers .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
          $div[.TextSection] {
            $h4 {What it does}
            This project was an attempt to build simple AI that would
            steer blobs towards food and make them avoid predators.
            User can select blobs to see their stats and what they chase / escape from.
            On the right hand side there is a bar with stats of the selected blob.
          }
          $div[.TextSection] {
            $h4 {How it works}
            Blobs have a few "brain states" that they can be in.
            They include "Hungry-Search", "Hungry-Chase" and "Scared".
            Each state has a method that evaluates weight of each state
            based on proximity of food, predators and energy level.
            Blob will behave according to the algorithm of state with the highest weight.
          }
          $div[.TextSection] {
            $h4 {Deployment}
            Project is deployed on Github pages.
          }
          $div[.TextSection] {
            $h4 {Limitations}
            Project is not responsive. Screen is assumed to be 1920x1080.
            Carnivore blobs have inferior stats, leading to their extinction
            few minutes after simulation started.
            Blobs of the same type do not collide and can move into each other.
          }
          $div[.TextSection .Screenshots]
        }
      }
      $div[#Domi .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
          $div[.TextSection] {
            $h4 {Project Description}
            This is a Javascript package for working with the DOM.
            It provides a set of functions for most common actions.
            Some of them are aliases for methods of the "document" object.
            There are also a few utility classes.
            DomStateToggle class toggles CSS classes in its assigned element and
              if configured, can also toggle the hidden flag.
            Switcher and AnimatedSwitcher allow switching sections in
              a single-document application making sure there always is only one section
              visible at the same time.
            For full documentation visit the Github repository page.
          }
          $div[.TextSection] {
            $h4 {Use cases}
            This package is used in some of my web applications.
            Examples include this website and my "Web Chat" project.
          }
          $div[.TextSection] {
            $h4 {Recent progress}
            Added more DOM mainpulation functions: '$remove' for removing nodes,
            '$text' for creating text nodes and '$empty' for removing all children from a node.
            Added an 'AnimatedSwitcher' that delays reveal of the target section and
            in order to animate, adds temporary CSS classes to an element.
          }
        }
      }
      $div[#SHP .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
          $div[.TextSection] {
            $h4 {Project Description (Python)}
            This is simple HTML preprocessor that works independently from the server.
            SHP syntax is cleaner than HTML due to being based on brackets,
            rather than tag enclosures.
            The script can be started with a flag that makes it watch the SHP file for changes.
          }
          $div[.TextSection] {
            $h4 {Project Description (Javascript)}
            This version uses the same SHP syntax as the Python version but does not support functions.
            When supplied with valid code, the compiler returns an array of nodes
              that can be added to the DOM tree.
          }
          $div[.TextSection] {
            $h4 {Why not use other preprocessors}
            In projects that work with this preprocessor,
            HTML is compiled before deployment (hence static in the name).
            I failed to find any other preprocessor of this type.
            All of them worked with the server and compiled HTML at users request.
          }
          $div[.TextSection] {
            $h4 {Use cases}
            SHP can be used anywhere where one would normally use plain HTML.
            This includes purely front-end projects.
            This website and my Web Chat project were generated with SHP.
          }
          $div[.TextSection] {
            $h4 {Notepad++ UDL}
            In the repository there is an UDL config file.
            It can be imported to Nodepad++ in order to enable SHP syntax coloring.
          }
          $div[.TextSection] {
            $h4 {Recent progress}
            Recent changes to the language include '@doctype', '@define' and '@paste' functions.
            The lexer was improved and now uses states pattern.
          }
          $div[.TextSection] {
            $h4 {Limitations}
            Because of how the code is parsed 'pre' tags are rendered useless.
            Single-ticks must be escaped to create apostrophes.
            Dollar signs can not be used outside the single ticks.
          }
        }
      }
      $div[#CIS .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
        }
      }
      $div[#RoverSoft .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
        }
      }
      $div[#Pluginable .Project] {
      $div[.Background]
        $div[.Content] {
          $div [.Header]
          $div[.TextSection] {
            $h4 {Project Description}
            This is a framework for creating modular Python applications.
            It joins the plugins into a proper multiprocessing program.
            Each plugin runs in a separate process,
              which allows for a better performance potential.
            Plugins can communicate with each other via events system.
          }
          $div[.TextSection] {
            $h4 {Use cases}
            Thanks to the setup + loop program structure it works well with GUIs and
            continuous input from the network or sensors.
          }
          $div[.TextSection] {
            $h4 {Limitations}
            There is quite large start-up overhead caused primarly by the multiprocessing.
          }
        }
      }
      $div[#TkInterWrapper .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
        }
      }
      $div[#Pathfinder .Project] {
        $div[.Background]
        $div[.Content] {
          $div [.Header]
        }
      }
    }
  }
}
